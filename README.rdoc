= Laborantin (cheaper than an intern!)


== Purpose

Laborantin is a framework intended to help people that performs a lot of experiments that can be scripted (e.g., scientists).
It has two main abstractions: Environment and Scenario.
* Environment: represents what cannot be changed easily, like the version of an operating system, or an hardware component.
* Scenario: represents an experiment, with parameters that you will vary to study their impact.

Laborantin ships with an executable script that allows you to perform recurring tasks like running, finding experiments with filtering on parameters sets.
The experiments reports are stored in a directory structure such that you don't have to bother about where to store which paramters.
Environments and Scenarios are also accessible as regular libraries (unless you don't want to use Ruby at all), such that you can use all the stored data without too much efforts.

=== Benefits

Laborantin enables you to focus on your experiments and not on the silly issues that come with scientific rigor, like logging what happened, organizing your scripts, or writing an argument parser for the N-th time. 

=== Current Features

Handy logging, hook points before / after running experiments.

=== Next Improvements

per-scenario failure / success meta-datafile
labor run missing-ones / failed-ones

=== Future

The future of Laborantin mainly depends on you, what are your needs? can you patch it?
We envision four main branches for the future of Laborantin:
* *Develop* a way for everyone to define its prefered directory structure, especially heretics that do not want to use Ruby and Laborantin's libraries to read the measurement reports.
* *Integrate* RubyDrill, to easily mine the data of the measurement reports.
* *Integrate* Sequel, to also easily record measurement reports in database.
* *Develop* roles in experiments having each Laborantin be a cooperating agent (maybe a P2P one).

Also, Laborantin was written super quickly, and there certainly is room for a lot of code and design improvements, feel free to participate (see contacts below).
== Workflow

Working with Laborantin is not straightforward, but it's not too much of a pain neither. You can follow the tutorial (http://dicioccio.fr/laborantin) if you want the short overview on how to use it.

=== The labor script commands

==== help
Simply shows a list of available commands, if an argument is passed, details the command.

ex.1 [$ labor help ]
ex.2 [$ labor help create ]

==== create
Initializes a workbench with the correct directory structure. You can directly create empty stub files for environments and scenarii if you know what you will do.

ex. [$ labor create workbench --envs=foo1,foo2 -s bar1]

==== describe
Describes a workbench Environments and Scenarii, that's why it's important to fill the descriptions.

ex. [$ labor describe]

==== run
Runs matching -e Environments and -s Scenarii experiments, with parameters given in -p.

ex. [$ labor run -e foo -p "{:bar => [1,2,3]}"]

==== scan
Scans the result directory and counts, for each Scenario and Environment class, the number of performed instances.

ex. [$ labor scan]

==== find
Finds in the result dir the performed instances, and prints their name.

ex. [$ labor find -p "{:foo => [1,2,3]}"]

==== replay
Re-runs, by calling all products of each matching Environments and Scenarii. If -m option is given, will simply send the methods instead of reproducing all results. You should ensure that the methods / products work fine with "data in the databases", you might want to load previously dumped data.

ex. [$ labor run -s foo,bar -p "{:baz => [1,2,3]}"]
ex. [$ labor run -m meth1,meth2]

== Hints

=== Super classes ?
You can benefit from object orientation of Scenarii both in Environment and Scenarii, just make sure you don't run them (for Environment, set a dummy verification which is always false).

Unfortunately, subclasses of Environment or Scenario do not automatically inheritates from parent's parameter, this as to be discussed before I implement it.

=== Environment or Scenario ?
Sometimes it is hard to know what should go inside the code of the Environment and what should go inside the code of the Scenario. Indeed, you can compare two environments like you would compare two scenariis. There is no rule that fits all purposes, but I suggest that what can be changed easily should go to the environment. Also, all code which is related to sending commands to distant computers fit well in environments. Meanwhile, the content of the command is build inside the scenario.

=== Parameter or not ?
The same kind of ambivalence exists between Parameters and Scenarii. Sometimes the design of the same scenario with a different parameter makes more sense with a subclass (when you start having a lot of  `if params[:foo] == :bar'. It's up to you to decide afterwards, how you'll be filtering on results and perform your analysis.

== Contributors / Contacts

* Lucas Di Cioccio (http://dicioccio.fr)

== Licence
This library and tools are licensed under the GPL version 3 (http://www.gnu.org/licenses).

